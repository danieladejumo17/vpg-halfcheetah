# AUTOGENERATED! DO NOT EDIT! File to edit: ../vpg_core.ipynb.

# %% auto 0
__all__ = ['mlp', 'count_params', 'combined_shape', 'discount_cumsum', 'Actor', 'MLPCategoricalActor', 'MLPGuassianActor',
           'MLPCritic', 'MLPActorCritic']

# %% ../vpg_core.ipynb 1
import torch
import torch.nn as nn
import torch.nn.functional as F
import numpy as np

# %% ../vpg_core.ipynb 3
def mlp(sizes, activation, output_activation=nn.Identity):
    layers = []
    
    # for n sizes, there will be n-1 layers. A layer connect two sizes
    # Note: A size here refers to the input, hidden or output activations in the MLP network 
    for layer in range(len(sizes)-1):
        # use the output_activation when creating the last layer which is at index n-2
        act = activation if layer < (len(sizes)-2) else output_activation
        
        # create a layer connecting this size and the next size, and add its activation
        layers += [nn.Linear(sizes[layer], sizes[layer+1]), act()]
    return nn.Sequential(*layers)

# %% ../vpg_core.ipynb 8
def count_params(model):
    return sum([np.prod(p.shape) for p in model.parameters()])

# %% ../vpg_core.ipynb 11
def combined_shape(length, shape=None):
    if shape is None:
        return (length,)
    return (length, shape) if np.isscalar(shape) else (length, *shape)

# %% ../vpg_core.ipynb 14
import scipy.signal

def discount_cumsum(x, discount):
    """
    magic from rllab for computing discounted cumulative sums of vectors.

    input: 
        vector x, 
        [x0, 
         x1, 
         x2]

    output:
        [x0 + discount * x1 + discount^2 * x2,  
         x1 + discount * x2,
         x2]
    """
    return scipy.signal.lfilter([1], [1, float(-discount)], x[::-1], axis=0)[::-1]

# %% ../vpg_core.ipynb 18
class Actor(nn.Module):
    def _distribution(self, obs):
        raise NotImplementedError
        
    def _log_prob_from_distribution(self, pi, act):
        raise NotImplementedError
        
    def forward(self, obs, act=None):
        pi = self._distribution(obs)
        log_prob = None
        if act is not None:
            log_prob = self._log_prob_from_distribution(pi, act)
        return pi, log_prob        

# %% ../vpg_core.ipynb 20
from torch.distributions.categorical import Categorical

class MLPCategoricalActor(Actor):
    def __init__(self, obs_dim, act_dim, hidden_sizes, activation):
        super().__init__()
        self.logits_net = mlp([obs_dim] + list(hidden_sizes) + [act_dim], activation)
        
    def _distribution(self, obs):
        logits = self.logits_net(obs)
        return Categorical(logits=logits)
        
    def _log_prob_from_distribution(self, pi, act):
        return pi.log_prob(act)

# %% ../vpg_core.ipynb 26
from torch.distributions.normal import Normal

class MLPGuassianActor(Actor):
    def __init__(self, obs_dim, act_dim, hidden_sizes, activation):
        super().__init__()
        log_std = -0.5*np.ones(act_dim, dtype=np.float32)
        self.log_std = nn.Parameter(torch.as_tensor(log_std))
        self.mu_net = mlp([obs_dim] + list(hidden_sizes) + [act_dim], activation)
        
    def _distribution(self, obs):
        mu = self.mu_net(obs)
        std = torch.exp(self.log_std)
        return Normal(mu, std)
    
    def _log_prob_from_distribution(self, pi, act):
        # act has N dimensions. To get the log_prob of action `act`, sum the 
        # log_prob of each of the dim of act
        return pi.log_prob(act).sum(axis=-1)

# %% ../vpg_core.ipynb 31
class MLPCritic(nn.Module):
    def __init__(self, obs_dim, hidden_sizes, activation):
        super().__init__()
        self.v_net = mlp([obs_dim] + list(hidden_sizes) + [1], activation)
        
    def forward(self, obs):
        # reshape the output from (batch, 1) to (batch)
        return torch.squeeze(self.v_net(obs), dim=-1)

# %% ../vpg_core.ipynb 35
import gym

class MLPActorCritic(nn.Module):
    def __init__(self, observation_space, action_space, 
                 hidden_sizes=[64, 64], 
                 activation=nn.Tanh):
        super().__init__()
        
        obs_dim = observation_space.shape[0]
        
        # create a categorical actor for action space of type spaces.Discrete
        # and a guassian actor for action space of type spaces.Box
        if isinstance(action_space, gym.spaces.Discrete):
            self.pi = MLPCategoricalActor(obs_dim, action_space.n, hidden_sizes, activation)
        elif isinstance(action_space, gym.spaces.Box):
            self.pi = MLPGuassianActor(obs_dim, action_space.shape[0], hidden_sizes, activation)
            
        # create the value function network
        self.v = MLPCritic(obs_dim, hidden_sizes, activation)
        
    def step(self, obs):
        # step is computed with no grad
        with torch.no_grad():
            # get the pi distribution for this observation
            pi = self.pi._distribution(obs)
            # sample actions from pi
            act = pi.sample()
            # get the log_prob of this action
            log_prob = self.pi._log_prob_from_distribution(pi, act)
            # get the value of this state
            v = self.v(obs)
        return act.numpy(), v.numpy(), log_prob.numpy()
    
    def act(self, obs):
        """Get only the actions for this observation"""
        return self.step(obs)[0]        
